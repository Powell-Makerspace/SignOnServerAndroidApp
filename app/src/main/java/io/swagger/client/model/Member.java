/*
 * Powell Makerspace Login Application API
 * Application designed to track and analyze visit and member information.
 *
 * OpenAPI spec version: 1.0
 * Contact: r.anthony1961@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Member
 */
public class Member {
  @SerializedName("memberId")
  private Long memberId = null;

  @SerializedName("memberName")
  private String memberName = null;

  /**
   * Gets or Sets membershipType
   */
  @JsonAdapter(MembershipTypeEnum.Adapter.class)
  public enum MembershipTypeEnum {
    INDIVIDUAL("INDIVIDUAL"),
    
    FAMILY("FAMILY"),
    
    LIBRARY_PASS("LIBRARY_PASS"),
    
    PUNCH_PASS("PUNCH_PASS"),
    
    NORTHWEST_COLLEGE("NORTHWEST_COLLEGE"),
    
    NONMEMBER("NONMEMBER"),
    
    VISTA("VISTA");

    private String value;

    MembershipTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembershipTypeEnum fromValue(String text) {
      for (MembershipTypeEnum b : MembershipTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MembershipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembershipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembershipTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MembershipTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("membershipType")
  private MembershipTypeEnum membershipType = null;

  @SerializedName("punchPasses")
  private Integer punchPasses = null;

  public Member memberId(Long memberId) {
    this.memberId = memberId;
    return this;
  }

   /**
   * Get memberId
   * @return memberId
  **/
  @ApiModelProperty(value = "")
  public Long getMemberId() {
    return memberId;
  }

  public void setMemberId(Long memberId) {
    this.memberId = memberId;
  }

  public Member memberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

   /**
   * Get memberName
   * @return memberName
  **/
  @ApiModelProperty(value = "")
  public String getMemberName() {
    return memberName;
  }

  public void setMemberName(String memberName) {
    this.memberName = memberName;
  }

  public Member membershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
    return this;
  }

   /**
   * Get membershipType
   * @return membershipType
  **/
  @ApiModelProperty(value = "")
  public MembershipTypeEnum getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
  }

  public Member punchPasses(Integer punchPasses) {
    this.punchPasses = punchPasses;
    return this;
  }

   /**
   * Get punchPasses
   * @return punchPasses
  **/
  @ApiModelProperty(value = "")
  public Integer getPunchPasses() {
    return punchPasses;
  }

  public void setPunchPasses(Integer punchPasses) {
    this.punchPasses = punchPasses;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Member member = (Member) o;
    return Objects.equals(this.memberId, member.memberId) &&
        Objects.equals(this.memberName, member.memberName) &&
        Objects.equals(this.membershipType, member.membershipType) &&
        Objects.equals(this.punchPasses, member.punchPasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberId, memberName, membershipType, punchPasses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Member {\n");
    
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    memberName: ").append(toIndentedString(memberName)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    punchPasses: ").append(toIndentedString(punchPasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

